// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/tc/tc.go

// Package mock_tc is a generated GoMock package.
package mock_tc

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBpfTc is a mock of BpfTc interface.
type MockBpfTc struct {
	ctrl     *gomock.Controller
	recorder *MockBpfTcMockRecorder
}

// MockBpfTcMockRecorder is the mock recorder for MockBpfTc.
type MockBpfTcMockRecorder struct {
	mock *MockBpfTc
}

// NewMockBpfTc creates a new mock instance.
func NewMockBpfTc(ctrl *gomock.Controller) *MockBpfTc {
	mock := &MockBpfTc{ctrl: ctrl}
	mock.recorder = &MockBpfTcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBpfTc) EXPECT() *MockBpfTcMockRecorder {
	return m.recorder
}

// CleanupQdiscs mocks base method.
func (m *MockBpfTc) CleanupQdiscs(ingressCleanup, egressCleanup bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupQdiscs", ingressCleanup, egressCleanup)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupQdiscs indicates an expected call of CleanupQdiscs.
func (mr *MockBpfTcMockRecorder) CleanupQdiscs(ingressCleanup, egressCleanup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupQdiscs", reflect.TypeOf((*MockBpfTc)(nil).CleanupQdiscs), ingressCleanup, egressCleanup)
}

// GetAllAttachedProgIds mocks base method.
func (m *MockBpfTc) GetAllAttachedProgIds() (map[string]int, map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAttachedProgIds")
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(map[string]int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllAttachedProgIds indicates an expected call of GetAllAttachedProgIds.
func (mr *MockBpfTcMockRecorder) GetAllAttachedProgIds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAttachedProgIds", reflect.TypeOf((*MockBpfTc)(nil).GetAllAttachedProgIds))
}

// TCEgressAttach mocks base method.
func (m *MockBpfTc) TCEgressAttach(interfaceName string, progFD int, funcName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TCEgressAttach", interfaceName, progFD, funcName)
	ret0, _ := ret[0].(error)
	return ret0
}

// TCEgressAttach indicates an expected call of TCEgressAttach.
func (mr *MockBpfTcMockRecorder) TCEgressAttach(interfaceName, progFD, funcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TCEgressAttach", reflect.TypeOf((*MockBpfTc)(nil).TCEgressAttach), interfaceName, progFD, funcName)
}

// TCEgressDetach mocks base method.
func (m *MockBpfTc) TCEgressDetach(interfaceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TCEgressDetach", interfaceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// TCEgressDetach indicates an expected call of TCEgressDetach.
func (mr *MockBpfTcMockRecorder) TCEgressDetach(interfaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TCEgressDetach", reflect.TypeOf((*MockBpfTc)(nil).TCEgressDetach), interfaceName)
}

// TCIngressAttach mocks base method.
func (m *MockBpfTc) TCIngressAttach(interfaceName string, progFD int, funcName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TCIngressAttach", interfaceName, progFD, funcName)
	ret0, _ := ret[0].(error)
	return ret0
}

// TCIngressAttach indicates an expected call of TCIngressAttach.
func (mr *MockBpfTcMockRecorder) TCIngressAttach(interfaceName, progFD, funcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TCIngressAttach", reflect.TypeOf((*MockBpfTc)(nil).TCIngressAttach), interfaceName, progFD, funcName)
}

// TCIngressDetach mocks base method.
func (m *MockBpfTc) TCIngressDetach(interfaceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TCIngressDetach", interfaceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// TCIngressDetach indicates an expected call of TCIngressDetach.
func (mr *MockBpfTcMockRecorder) TCIngressDetach(interfaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TCIngressDetach", reflect.TypeOf((*MockBpfTc)(nil).TCIngressDetach), interfaceName)
}
