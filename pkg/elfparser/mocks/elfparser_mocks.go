// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-ebpf-sdk-go/pkg/elfparser (interfaces: BpfSDKClient)

// Package mock_elfparser is a generated GoMock package.
package mock_elfparser

import (
	reflect "reflect"

	elfparser "github.com/aws/aws-ebpf-sdk-go/pkg/elfparser"
	maps "github.com/aws/aws-ebpf-sdk-go/pkg/maps"
	gomock "github.com/golang/mock/gomock"
)

// MockBpfSDKClient is a mock of BpfSDKClient interface.
type MockBpfSDKClient struct {
	ctrl     *gomock.Controller
	recorder *MockBpfSDKClientMockRecorder
}

// MockBpfSDKClientMockRecorder is the mock recorder for MockBpfSDKClient.
type MockBpfSDKClientMockRecorder struct {
	mock *MockBpfSDKClient
}

// NewMockBpfSDKClient creates a new mock instance.
func NewMockBpfSDKClient(ctrl *gomock.Controller) *MockBpfSDKClient {
	mock := &MockBpfSDKClient{ctrl: ctrl}
	mock.recorder = &MockBpfSDKClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBpfSDKClient) EXPECT() *MockBpfSDKClientMockRecorder {
	return m.recorder
}

// IncreaseRlimit mocks base method.
func (m *MockBpfSDKClient) IncreaseRlimit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseRlimit")
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseRlimit indicates an expected call of IncreaseRlimit.
func (mr *MockBpfSDKClientMockRecorder) IncreaseRlimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseRlimit", reflect.TypeOf((*MockBpfSDKClient)(nil).IncreaseRlimit))
}

// LoadBpfFile mocks base method.
func (m *MockBpfSDKClient) LoadBpfFile(arg0, arg1 string) (map[string]elfparser.BpfData, map[string]maps.BpfMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBpfFile", arg0, arg1)
	ret0, _ := ret[0].(map[string]elfparser.BpfData)
	ret1, _ := ret[1].(map[string]maps.BpfMap)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadBpfFile indicates an expected call of LoadBpfFile.
func (mr *MockBpfSDKClientMockRecorder) LoadBpfFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBpfFile", reflect.TypeOf((*MockBpfSDKClient)(nil).LoadBpfFile), arg0, arg1)
}

// RecoverAllBpfProgramsAndMaps mocks base method.
func (m *MockBpfSDKClient) RecoverAllBpfProgramsAndMaps() (map[string]elfparser.BpfData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverAllBpfProgramsAndMaps")
	ret0, _ := ret[0].(map[string]elfparser.BpfData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecoverAllBpfProgramsAndMaps indicates an expected call of RecoverAllBpfProgramsAndMaps.
func (mr *MockBpfSDKClientMockRecorder) RecoverAllBpfProgramsAndMaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverAllBpfProgramsAndMaps", reflect.TypeOf((*MockBpfSDKClient)(nil).RecoverAllBpfProgramsAndMaps))
}

// RecoverGlobalMaps mocks base method.
func (m *MockBpfSDKClient) RecoverGlobalMaps() (map[string]maps.BpfMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverGlobalMaps")
	ret0, _ := ret[0].(map[string]maps.BpfMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecoverGlobalMaps indicates an expected call of RecoverGlobalMaps.
func (mr *MockBpfSDKClientMockRecorder) RecoverGlobalMaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverGlobalMaps", reflect.TypeOf((*MockBpfSDKClient)(nil).RecoverGlobalMaps))
}
